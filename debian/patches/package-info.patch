--- framework/src/play/classloading/ApplicationClasses.java	2010-06-01 11:57:38 +0000
+++ framework/src/play/classloading/ApplicationClasses.java	2010-07-13 16:44:13 +0000
@@ -62,6 +62,8 @@
         List<ApplicationClass> results = new ArrayList<ApplicationClass>();
         if (clazz != null) {
             for (ApplicationClass applicationClass : classes.values()) {
+            	if(!applicationClass.isClass())
+            		continue;
                 try {
                     Play.classloader.loadClass(applicationClass.name);
                 } catch (ClassNotFoundException ex) {
@@ -86,6 +88,8 @@
     public List<ApplicationClass> getAnnotatedClasses(Class<? extends Annotation> clazz) {
         List<ApplicationClass> results = new ArrayList<ApplicationClass>();
         for (ApplicationClass applicationClass : classes.values()) {
+        	if(!applicationClass.isClass())
+        		continue;
             try {
                 Play.classloader.loadClass(applicationClass.name);
             } catch (ClassNotFoundException ex) {
@@ -171,6 +175,10 @@
          */
         public Class<?> javaClass;
         /**
+         * The in JVM loaded package
+         */
+        public Package javaPackage;
+        /**
          * Last time than this class was compiled
          */
         public Long timestamp = 0L;
@@ -211,23 +219,25 @@
          */
         public byte[] enhance() {
             this.enhancedByteCode = this.javaByteCode;
-            for (Class<?> enhancer : enhancers) {
-                try {
-                    long start = System.currentTimeMillis();
-                    ((Enhancer) enhancer.newInstance()).enhanceThisClass(this);
-                    Logger.trace("%sms to apply %s to %s", System.currentTimeMillis() - start, enhancer.getSimpleName(), name);
-                } catch (Exception e) {
-                    throw new UnexpectedException("While applying " + enhancer + " on " + name, e);
-                }
-            }
-            for (PlayPlugin plugin : Play.plugins) {
-                try {
-                    long start = System.currentTimeMillis();
-                    plugin.enhance(this);
-                    Logger.trace("%sms to apply %s to %s", System.currentTimeMillis() - start, plugin, name);
-                } catch (Exception e) {
-                    throw new UnexpectedException("While applying " + plugin + " on " + name, e);
-                }
+            if(isClass()){
+            	for (Class<?> enhancer : enhancers) {
+            		try {
+            			long start = System.currentTimeMillis();
+            			((Enhancer) enhancer.newInstance()).enhanceThisClass(this);
+            			Logger.trace("%sms to apply %s to %s", System.currentTimeMillis() - start, enhancer.getSimpleName(), name);
+            		} catch (Exception e) {
+            			throw new UnexpectedException("While applying " + enhancer + " on " + name, e);
+            		}
+            	}
+            	for (PlayPlugin plugin : Play.plugins) {
+            		try {
+            			long start = System.currentTimeMillis();
+            			plugin.enhance(this);
+            			Logger.trace("%sms to apply %s to %s", System.currentTimeMillis() - start, plugin, name);
+            		} catch (Exception e) {
+            			throw new UnexpectedException("While applying " + plugin + " on " + name, e);
+            		}
+            	}
             }
             if (System.getProperty("precompile") != null) {
                 try {
@@ -252,7 +262,16 @@
         public boolean isDefinable() {
             return compiled && javaClass != null;
         }
+        
+        public boolean isClass(){
+        	return !name.endsWith("package-info");
+        }
 
+        public String getPackage(){
+        	int dot = name.lastIndexOf('.');
+        	return dot > -1 ? name.substring(0, dot) : "";
+        }
+        
         /**
          * Compile the class from Java source
          * @return the bytes that comprise the class file

--- framework/src/play/classloading/ApplicationClassloader.java	2010-06-01 11:57:38 +0000
+++ framework/src/play/classloading/ApplicationClassloader.java	2010-07-16 12:43:36 +0000
@@ -1,5 +1,6 @@
 package play.classloading;
 
+import java.io.ByteArrayInputStream;
 import java.io.ByteArrayOutputStream;
 import java.io.File;
 import java.io.IOException;
@@ -64,7 +65,7 @@
      */
     @Override
     protected synchronized Class<?> loadClass(String name, boolean resolve) throws ClassNotFoundException {
-        Class<?> c = findLoadedClass(name);
+    	Class<?> c = findLoadedClass(name);
         if (c != null) {
             return c;
         }
@@ -94,11 +95,17 @@
                 byte[] code = IO.readContent(file);
                 Class<?> clazz = findLoadedClass(name);
                 if (clazz == null) {
+                	if(name.endsWith("package-info"))
+                		definePackage(getPackageName(name), null, null, null, null, null, null, null);
+                	else
+                		loadPackage(name);
                     clazz = defineClass(name, code, 0, code.length, protectionDomain);
                 }
                 ApplicationClass applicationClass = Play.classes.getApplicationClass(name);
                 if (applicationClass != null) {
                     applicationClass.javaClass = clazz;
+                    if(!applicationClass.isClass())
+                    	applicationClass.javaPackage = applicationClass.javaClass.getPackage();
                 }
                 return clazz;
             } catch (Exception e) {
@@ -113,10 +120,17 @@
                 return applicationClass.javaClass;
             }
             byte[] bc = BytecodeCache.getBytecode(name, applicationClass.javaSource);
+            Logger.trace("Compiling code for %s", name);
+            if(!applicationClass.isClass())
+                definePackage(applicationClass.getPackage(), null, null, null, null, null, null, null);
+            else
+                loadPackage(name);
             if (bc != null) {
                 applicationClass.enhancedByteCode = bc;
                 applicationClass.javaClass = defineClass(applicationClass.name, applicationClass.enhancedByteCode, 0, applicationClass.enhancedByteCode.length, protectionDomain);
                 resolveClass(applicationClass.javaClass);
+                if(!applicationClass.isClass())
+                	applicationClass.javaPackage = applicationClass.javaClass.getPackage();
                 Logger.trace("%sms to load class %s from cache", System.currentTimeMillis() - start, name);
                 return applicationClass.javaClass;
             }
@@ -125,6 +139,8 @@
                 applicationClass.javaClass = defineClass(applicationClass.name, applicationClass.enhancedByteCode, 0, applicationClass.enhancedByteCode.length, protectionDomain);
                 BytecodeCache.cacheBytecode(applicationClass.enhancedByteCode, name, applicationClass.javaSource);
                 resolveClass(applicationClass.javaClass);
+                if(!applicationClass.isClass())
+                	applicationClass.javaPackage = applicationClass.javaClass.getPackage();
                 Logger.trace("%sms to load class %s", System.currentTimeMillis() - start, name);
                 return applicationClass.javaClass;
             }
@@ -133,6 +149,27 @@
         return null;
     }
 
+    private String getPackageName(String name) {
+    	int dot = name.lastIndexOf('.');
+    	return dot > -1 ? name.substring(0, dot) : "";
+	}
+
+	private void loadPackage(String className){
+    	// find the package class name
+    	int symbol = className.indexOf("$");
+        if (symbol > -1) {
+            className = className.substring(0, symbol);
+        }
+    	symbol = className.lastIndexOf(".");
+        if (symbol > -1) {
+            className = className.substring(0, symbol) + ".package-info";
+        }else{
+        	className = "package-info";
+        }
+        if(findLoadedClass(className) == null)
+        	loadApplicationClass(className);
+    }
+    
     /**
      * Search for the byte code of the given class.
      */
@@ -301,6 +338,7 @@
             throw new RuntimeException("Path has changed");
         }
     }
+
     /**
      * Used to track change of the application sources path
      */

=== modified file 'framework/src/play/db/jpa/JPAPlugin.java'
--- framework/src/play/db/jpa/JPAPlugin.java	2010-06-01 11:57:38 +0000
+++ framework/src/play/db/jpa/JPAPlugin.java	2010-07-13 16:47:18 +0000
@@ -20,6 +20,7 @@
 import play.Logger;
 import play.Play;
 import play.PlayPlugin;
+import play.classloading.ApplicationClasses.ApplicationClass;
 import play.db.DB;
 import play.exceptions.JPAException;
 import play.utils.Utils;
@@ -100,42 +101,42 @@
                 }
 
                 @Override
-                public boolean onCollectionUpdate(Object collection, Serializable key) throws CallbackException {
-                    if (collection instanceof PersistentCollection) {
-                        Object o = ((PersistentCollection) collection).getOwner();
-                        if (o instanceof JPABase) {
-                            return ((JPABase) o).willBeSaved;
-                        }
-                    } else {
-                        System.out.println("HOO: Case not handled !!!");
-                    }
-                    return super.onCollectionUpdate(collection, key);
-                }
-
-                @Override
-                public boolean onCollectionRecreate(Object collection, Serializable key) throws CallbackException {
-                    if (collection instanceof PersistentCollection) {
-                        Object o = ((PersistentCollection) collection).getOwner();
-                        if (o instanceof JPABase) {
-                            return ((JPABase) o).willBeSaved;
-                        }
-                    } else {
-                        System.out.println("HOO: Case not handled !!!");
-                    }
-                    return super.onCollectionRecreate(collection, key);
-                }
-
-                @Override
-                public boolean onCollectionRemove(Object collection, Serializable key) throws CallbackException {
-                    if (collection instanceof PersistentCollection) {
-                        Object o = ((PersistentCollection) collection).getOwner();
-                        if (o instanceof JPABase) {
-                            return ((JPABase) o).willBeSaved;
-                        }
-                    } else {
-                        System.out.println("HOO: Case not handled !!!");
-                    }
-                    return super.onCollectionRemove(collection, key);
+                public void onCollectionUpdate(Object collection, Serializable key) throws CallbackException {
+                    if (collection instanceof PersistentCollection) {
+                        Object o = ((PersistentCollection) collection).getOwner();
+                        if (o instanceof JPABase) {
+                            return;
+                        }
+                    } else {
+                        System.out.println("HOO: Case not handled !!!");
+                    }
+                    super.onCollectionUpdate(collection, key);
+                }
+
+                @Override
+                public void onCollectionRecreate(Object collection, Serializable key) throws CallbackException {
+                    if (collection instanceof PersistentCollection) {
+                        Object o = ((PersistentCollection) collection).getOwner();
+                        if (o instanceof JPABase) {
+                            return;
+                        }
+                    } else {
+                        System.out.println("HOO: Case not handled !!!");
+                    }
+                    super.onCollectionRecreate(collection, key);
+                }
+
+                @Override
+                public void onCollectionRemove(Object collection, Serializable key) throws CallbackException {
+                    if (collection instanceof PersistentCollection) {
+                        Object o = ((PersistentCollection) collection).getOwner();
+                        if (o instanceof JPABase) {
+                            return;
+                        }
+                    } else {
+                        System.out.println("HOO: Case not handled !!!");
+                    }
+                    super.onCollectionRemove(collection, key);
                 }
             });
             if (Play.configuration.getProperty("jpa.debugSQL", "false").equals("true")) {
@@ -168,6 +169,13 @@
                     Logger.warn("JPA -> Entity not found: %s", entity);
                 }
             }
+            for(ApplicationClass applicationClass : Play.classes.all()){
+            	if(applicationClass.isClass() || applicationClass.javaPackage == null)
+            		continue;
+            	Package p = applicationClass.javaPackage;
+                Logger.info("JPA -> Adding package: %s", p.getName());
+            	cfg.addPackage(p.getName());
+            }
             Logger.trace("Initializing JPA ...");
             try {
                 JPA.entityManagerFactory = cfg.buildEntityManagerFactory();

